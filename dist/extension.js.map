{"version":3,"sources":["webpack://mykey/./src/Cursor.ts","webpack://mykey/./src/Editor.ts","webpack://mykey/./src/Logger.ts","webpack://mykey/./src/Mykey.ts","webpack://mykey/./src/extension.ts","webpack://mykey/external \"vscode\"","webpack://mykey/webpack/bootstrap","webpack://mykey/webpack/startup"],"names":["Cursor","move","to","by","value","select","vscode","commands","executeCommand","getPosition","editor","selection","isEmpty","active","getSelection","document","getText","Editor","updateEditor","window","activeTextEditor","Logger","message","showInformationMessage","setContext","key","updateMode","this","mode","toggleMode","console","log","getMode","context","MyKey","toggle","registerCommand","options","cursorStyle","TextEditorCursorStyle","Block","Line","moveLeft","moveRight","moveUp","moveDown","moveLeftWithSelection","moveRightWithSelection","moveUpWithSelection","moveDownWithSelection","onDidChangeActiveTextEditor","e","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"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","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\nimport Editor from \"./Editor\";\n\nexport default class Cursor {\n  public static move = async (to: string, by: string, value: number, select: boolean = false) => {\n    await vscode.commands.executeCommand(\"cursorMove\", { to, by, value, select });\n  };\n  public static getPosition = (): vscode.Position | undefined => {\n    const editor = Editor.editor;\n    if (editor?.selection.isEmpty) {\n      return editor.selection.active;\n    }\n    return undefined;\n  };\n  public static getSelection = () => {\n    const editor = Editor.editor;\n    if (editor) {\n      return editor.document.getText(editor.selection);\n    }\n  };\n}\n","import * as vscode from \"vscode\";\n\nexport default class Editor {\n  static editor: vscode.TextEditor | undefined;\n  static updateEditor = () => {\n    Editor.editor = vscode.window.activeTextEditor;\n  };\n}\n","import * as vscode from \"vscode\";\n\nexport default class Logger {\n  public static message = (message: any) => {\n    vscode.window.showInformationMessage(message);\n  };\n}\n","import * as vscode from \"vscode\";\n\nexport default class MyKey {\n  private mode: \"Insert\" | \"Mykey\";\n\n  constructor() {\n    this.mode = \"Insert\";\n  }\n  public setContext = async (key: string, value: boolean | string) => {\n    await vscode.commands.executeCommand(\"setContext\", key, value);\n  };\n  public updateMode = async () => {\n    await this.setContext(\"mykey.mode\", this.mode);\n  };\n\n  public toggleMode = () => {\n    console.log(this.mode);\n    this.mode = this.mode === \"Insert\" ? \"Mykey\" : \"Insert\";\n    this.updateMode();\n  };\n\n  public getMode = () => {\n    return this.mode;\n  };\n}\n","import * as vscode from \"vscode\";\nimport MyKeyClass from \"./Mykey\";\nimport Cursor from \"./Cursor\";\nimport Logger from \"./Logger\";\nimport Editor from \"./Editor\";\nimport Clipboard from \"./Clipboard\";\n\nconst extensionName = \"mykey\";\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log(`${extensionName} has been started!`);\n  const MyKey = new MyKeyClass();\n  MyKey.updateMode();\n  Editor.updateEditor();\n\n  let toggle = vscode.commands.registerCommand(`${extensionName}.toggle`, () => {\n    MyKey.toggleMode();\n    const editor = Editor.editor;\n    if (editor) {\n      if (MyKey.getMode() === \"Mykey\") {\n        editor.options.cursorStyle = vscode.TextEditorCursorStyle.Block;\n      } else {\n        editor.options.cursorStyle = vscode.TextEditorCursorStyle.Line;\n      }\n    }\n    Logger.message(`${extensionName} has been toggled. STATUS = ${MyKey.getMode() === \"Mykey\" ? \"ON\" : \"OFF\"}`);\n  });\n  let moveLeft = vscode.commands.registerCommand(`${extensionName}.moveLeft`, () => {\n    Cursor.move(\"left\", \"character\", 1);\n    Logger.message(`Move Left`);\n  });\n  let moveRight = vscode.commands.registerCommand(`${extensionName}.moveRight`, () => {\n    Cursor.move(\"right\", \"character\", 1);\n    Logger.message(`Move Right`);\n  });\n  let moveUp = vscode.commands.registerCommand(`${extensionName}.moveUp`, () => {\n    Cursor.move(\"up\", \"line\", 1);\n    Logger.message(`Move Up`);\n  });\n  let moveDown = vscode.commands.registerCommand(`${extensionName}.moveDown`, () => {\n    Cursor.move(\"down\", \"line\", 1);\n    Logger.message(`Move Down`);\n  });\n  let moveLeftWithSelection = vscode.commands.registerCommand(`${extensionName}.moveLeftWithSelection`, () => {\n    Cursor.move(\"left\", \"character\", 1, true);\n    Logger.message(`Move Left with selection`);\n  });\n  let moveRightWithSelection = vscode.commands.registerCommand(`${extensionName}.moveRightWithSelection`, () => {\n    Cursor.move(\"right\", \"character\", 1, true);\n    Logger.message(`Move Right with selection`);\n  });\n  let moveUpWithSelection = vscode.commands.registerCommand(`${extensionName}.moveUpWithSelection`, () => {\n    Cursor.move(\"up\", \"line\", 1, true);\n    Logger.message(`Move Up with selection`);\n  });\n  let moveDownWithSelection = vscode.commands.registerCommand(`${extensionName}.moveDownWithSelection`, () => {\n    Cursor.move(\"down\", \"line\", 1, true);\n    Logger.message(`Move Down with selection`);\n  });\n  vscode.window.onDidChangeActiveTextEditor((e) => {\n    Editor.updateEditor();\n  });\n\n  context.subscriptions.push(toggle);\n  context.subscriptions.push(moveLeft);\n  context.subscriptions.push(moveRight);\n  context.subscriptions.push(moveUp);\n  context.subscriptions.push(moveDown);\n  context.subscriptions.push(moveLeftWithSelection);\n  context.subscriptions.push(moveRightWithSelection);\n  context.subscriptions.push(moveUpWithSelection);\n  context.subscriptions.push(moveDownWithSelection);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n\n// let toggle = vscode.commands.registerCommand(\"mykey.toggle\", () => {\n//   mode = !mode;\n//   vscode.window.showInformationMessage(\n//     `MyKey has been toggled. STATUS = ${mode ? \"ON\" : \"OFF\"}`\n//   );\n// });\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}